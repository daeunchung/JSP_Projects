/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.37
 * Generated at: 2020-10-25 12:14:44 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.projects;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import projects.*;

public final class addrModify_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("projects");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			"addressbook_error.jsp", true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>주소 정보 수정</title>\r\n");
      out.write("<!-- 스타일시트 적용 -->\r\n");
      out.write("<link rel=\"stylesheet\" href=\"addressbook.css\" type=\"text/css\" media=\"screen\" />\r\n");
      out.write("\r\n");
      out.write("<!-- 삭제 버튼을 누른 경우 처리를 위한 JavaScript 지정 -->\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\tfunction deleteAddress() {\r\n");
      out.write("\t\tpwd = prompt(\"비밀번호: \");\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tif(pwd == \"1234\"){\r\n");
      out.write("\t\t\tresult = confirm(\"정말로 삭제하시겠습니까?\"); \r\n");
      out.write("\t\t\t// 입력에 따른 처리\r\n");
      out.write("\t\t\tif(result){\r\n");
      out.write("\t\t\t\tdocument.form1.action.value=\"delete\";\r\n");
      out.write("\t\t\t\tdocument.form1.submit();\r\n");
      out.write("\t\t\t} else{\r\n");
      out.write("\t\t\t\treturn;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t} else{\r\n");
      out.write("\t\t\talert(\"비밀번호가 틀렸습니다!\");\r\n");
      out.write("\t\t\treturn;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div align=\"center\"><h2>주소 수정</h2><hr>\r\n");
      out.write("\t[<a href=\"default.jsp\">주소록 목록으로</a>]<p>\r\n");
      out.write("\t\r\n");
      out.write("\t<form name=\"form1\" method=\"post\" action=\"addrController.jsp\">\r\n");
      out.write("\t");
      out.write("\r\n");
      out.write("\t<input type=\"hidden\" name=\"action\" value=\"update\">\r\n");
      out.write("\t");
      out.write('\r');
      out.write('\n');
      out.write('	');
 
		AddressBean addr = (AddressBean)request.getAttribute("addr");
	
      out.write('\r');
      out.write('\n');
      out.write('	');
      out.write("\r\n");
      out.write("\t<input type=\"hidden\" name=\"id\" value=\"");
      out.print( addr.getId() );
      out.write("\">\r\n");
      out.write("\t\r\n");
      out.write("\t<table border=\"1\">\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<th>이름</th>\r\n");
      out.write("\t\t\t<td><input type=\"text\" name=\"name\" maxlength=\"10\" value=\"");
      out.print( addr.getName() );
      out.write("\"></td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<th>email</th>\r\n");
      out.write("\t\t\t<td><input type=\"text\" name=\"email\" maxlength=\"20\" value=\"");
      out.print( addr.getEmail() );
      out.write("\"></td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<th>전화번호</th>\r\n");
      out.write("\t\t\t<td><input type=\"text\" name=\"tel\" maxlength=\"13\" value=\"");
      out.print( addr.getTel() );
      out.write("\"></td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<th>생일</th>\r\n");
      out.write("\t\t\t<td><input type=\"text\" name=\"birth\" value=\"");
      out.print( addr.getBirth() );
      out.write("\">\r\n");
      out.write("\t\t\t<br> \"yyyy-mm-dd\" 형식으로 입력하세요.</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<th>회사</th>\r\n");
      out.write("\t\t\t<td><input type=\"text\" name=\"company\" maxlength=\"10\" value=\"");
      out.print( addr.getCompany() );
      out.write("\"></td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<th>메모</th>\r\n");
      out.write("\t\t\t<td><input type=\"text\" name=\"memo\" maxlength=\"20\" value=\"");
      out.print( addr.getMemo() );
      out.write("\"></td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td colspan=\"2\" align=\"center\">\r\n");
      out.write("\t\t\t\t<input type=\"submit\" value=\"저장\"> \r\n");
      out.write("\t\t\t\t<!-- 하나의 form태그에는 하나의 submit버튼만 있을 수 있다. \r\n");
      out.write("\t\t\t\t그러나 submit 버튼을 2개 사용하기 위해서 하나는 form태그의 submit버튼으로 (기본submit이라서 update 액션가지고 이동), \r\n");
      out.write("\t\t\t\t다른하나는 javascript 에서 (function deleteAddress 이용해서 addrController.jsp 페이지로 이동할 수 있도록 \r\n");
      out.write("\t\t\t\t앞쪽에 달아줘서 처리했음 -->\r\n");
      out.write("\t\t\t\t<input type=\"button\" value=\"삭제\" onclick=\"deleteAddress()\">\r\n");
      out.write("\t\t\t\t<input type=\"reset\" value=\"취소\">\r\n");
      out.write("\t\t\t</td>\r\n");
      out.write("\t\t</tr>\t\r\n");
      out.write("\t</table>\r\n");
      out.write("\t</form>\r\n");
      out.write("\t\r\n");
      out.write("\t</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
