/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.37
 * Generated at: 2020-10-25 11:21:49 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.projects;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import projects.*;
import java.util.*;

public final class addrController_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("projects");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			"addressbook_error.jsp", true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
 request.setCharacterEncoding("utf-8"); 
      out.write("\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      projects.AddressBook addrBook = null;
      addrBook = (projects.AddressBook) _jspx_page_context.getAttribute("addrBook", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (addrBook == null){
        addrBook = new projects.AddressBook();
        _jspx_page_context.setAttribute("addrBook", addrBook, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write('\r');
      out.write('\n');
      out.write("    \r\n");
      projects.AddressBean addr = null;
      addr = (projects.AddressBean) _jspx_page_context.getAttribute("addr", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (addr == null){
        addr = new projects.AddressBean();
        _jspx_page_context.setAttribute("addr", addr, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write('\r');
      out.write('\n');
      out.write('\r');
      out.write('\n');
      org.apache.jasper.runtime.JspRuntimeLibrary.introspect(_jspx_page_context.findAttribute("addr"), request);
      out.write("\r\n");
      out.write("    \r\n");
 
	// 컨트롤러 요청 파라미터
	String action = request.getParameter("action");
	// 요청 파라미터에 따른 동작 처리
	if(action.equals("list")){	// 주소록 목록 요청 (DAO클래스의 메서드 읽어서 목록 가져오기, 가져온 목록을 View 에 전달)
		// 1. DB에서 읽어오는 작업    2. 속성관리를 통해 내장객체에 저장해주는 작업      3. 해당 페이지 불러주기
		ArrayList <AddressBean> addresses = addrBook.getAddrList();
		request.setAttribute("addrs", addresses); // 내장객체의 속성으로 set 해놓기
		pageContext.forward("addrList.jsp");     // 페이지 이동시켜주기 (addrList.jsp 에서 request.getAttribute로  ArrayList 속 내용을 읽어올 수 있다.)
	}
	
	else if(action.equals("insert")){	// 주소 등록 요청
		if(addrBook.insertAddr(addr)){
			// 입력에 성공한 경우, Controller를 경유하여 목록페이지 호출
			response.sendRedirect("addrController.jsp?action=list");
			// response.sendRedirect("default.jsp");
		}else{
			// 입력에 실패한 경우에는 예외 발생
			throw new Exception("새로운 주소 등록에 실패했습니다.");
		}
	}
	
	else if(action.equals("modify")){	// 주소 수정 페이지 요청
		// id 값을 이용하여 기존 주소록의 값을 불러옴
		// addrController.jsp?action=modify&id=1&pwd=1234
		AddressBean m_addr = addrBook.getAddr(Integer.parseInt(request.getParameter("id")));
		
		// 전달해온 비밀번호 추출
		String pwd = (String)request.getParameter("pwd");
		// out.println(pwd);
		// 입력한 관리자 비밀번호가 강제로 설정한 "1234" 와 일치하는지 확인
		if(pwd.equals("1234")){
			// out.println("비밀번호 일치");
			// 데이 터베이스로부터 읽은 정보를 수정 폼에 전달
			request.setAttribute("addr", m_addr);
			pageContext.forward("addrModify.jsp");
		} else {
			// out.println("비밀번호 불일치");
			// 비밀번호 불일치, 이전 페이지로 이동
			out.println("<script>alert('비밀번호가 틀렸습니다!'); " + "history.go(-1); </script>");
		}
	}
	
	else if(action.equals("update")){	// 수정된 주소로 등록 요청
		// 테스트
		// out.println(addr.getName() + ":" + addr.getEmail() + ":" + addr.getTel() + ":" 
		//	+ addr.getBirth() + ":" + addr.getCompany() + ":" + addr.getMemo() + ":" + addr.getId());
	
		// 전달되어온 정보를 이용하여 주소 수정
		if(addrBook.modifyAddr(addr)){
			out.println("success");
			response.sendRedirect("addrController.jsp?action=list");
			// response.sendRedirect("default.jsp");
		} else{
			// out.println("fail");
			throw new Exception("주소 수정에 실패하였습니다.");
		}
	}
	
	else if(action.equals("delete")){	// 주소 삭제요청
		// 전달되어온 정보를 이용하여 주소 삭제
		if(addrBook.deleteAddr(addr.getId())){
			response.sendRedirect("addrController.jsp?action=list");
			// response.sendRedirect("default.jsp");
		} else{
			throw new Exception("주소 삭제에 실패하였습니다.");
		}
	}else{	// 잘못된 액션 요청
		
	}

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
